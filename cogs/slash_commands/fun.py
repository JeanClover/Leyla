from io import BytesIO
from PIL import Image
from random import randint, choice
from typing import Literal
import time
import datetime

import disnake
from disnake.ext import commands

from Tools.exceptions import CustomError
from Tools.images import ship_image
from services import waifu_pics


OVERLAY_DESCRIPTIONS = {
    'jail': '{user} –ó–∞ —à–æ —Å–∏–¥–∏–º?',
    'wasted': 'R.I.P. {user} –ø–æ–≥–∏–±(-–ª–∞) —Å–º—Ä–µ—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö :D',
    'gay': 'ü§≠',
    'triggered': '–í–´–ê–´–í–û–ê–´–ê–û–´–í–ê–´–í–ê–†–´–†–ê–í–´–†–ê–õ–û'
}


class FunSlashCommands(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        options=[
            disnake.Option(name='a', type=disnake.OptionType.integer, description='–ß–∏—Å–ª–æ –æ—Ç:'),
            disnake.Option(name='b', type=disnake.OptionType.integer, description='–ß–∏—Å–ª–æ –¥–æ:')
        ],
        description='–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ'
    )
    async def random(self, inter: disnake.ApplicationCommandInteraction, a: int, b: int):
        if b < a or a == b:
            raise CustomError('–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –ø–µ—Ä–≤–æ–º—É –ª–∏–±–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º –æ–Ω–æ owo')
        embed = await self.bot.embeds.simple(inter, title=f'–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç `{a}` –¥–æ `{b}`', thumbnail=inter.author.avatar.url)
        embed.add_field(name='–í–∞—à–µ —á–∏—Å–ª–æ...', value=randint(a, b))
        return await inter.send(embed=embed)

    @commands.slash_command(
        options=[
            disnake.Option(
                'overlay', '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['wasted', 'jail', 'comrade', 'gay', 'glass', 'passed', 'triggered']
            ),
            disnake.Option('user', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', type=disnake.OptionType.user, required=False)
        ],
        name='avatar-overlay',
        description="–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∞–≤–∞—Ç–∞—Ä."
    )
    async def jail_image(self, inter: disnake.ApplicationCommandInteraction, overlay: str, user: disnake.User = commands.Param(lambda inter: inter.author)):
        async with self.bot.session.get(f'https://some-random-api.ml/canvas/{overlay}?avatar={user.display_avatar.url}') as response:
            image_bytes = BytesIO(await response.read())
            image_filename = f'overlay.{"png" if overlay != "triggered" else "gif"}'
            embed = await self.bot.embeds.simple(inter, title=OVERLAY_DESCRIPTIONS.get(overlay, f'`{user}`'), image=f'attachment://{image_filename}')
            await inter.send(embed=embed, file=disnake.File(image_bytes, filename=image_filename))
            return await response.close()

    @commands.slash_command(
        options=[
            disnake.Option(
                'choice', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤–ê—Ç–¨–∫—É owo', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['megumin', 'shinobu', 'awoo', 'neko', 'poke']
            )
        ],
        name='anime-girl',
        description="–ê–Ω–∏–º–µ —Ç—è–Ω–∫–∏"
    )
    async def anime_girl(self, inter: disnake.ApplicationCommandInteraction, choice: str):
        embed = await self.bot.embeds.simple(inter, title=f'{choice.title()} OwO', image=await waifu_pics.get_image('sfw', choice.lower()))
        return await inter.send(embed=embed)

    @commands.slash_command(name="ship", description="–°–æ–∑–¥–∞–Ω–∏–µ —à–∏–ø-–∫–∞—Ä—Ç–∏–Ω–∫–∏")
    async def ship_not_ship(
        self, 
        inter, 
        user_one: disnake.User,
        second_user: disnake.User
    ):
        await inter.response.defer()
        percentage = randint(1, 100)
        get_image = ship_image(percentage, user_one, second_user)
        file = disnake.File(get_image.image_bytes, 'ship_img.png')

        await inter.send(
            embed=await self.bot.embeds.simple(
                title=f'*–¢–æ–ª–∫–Ω—É–ª–∞ {user_one.name} –Ω–∞ {second_user.name}* <:awww:878155710796550145>' if percentage > 30 else '–•—Ä—É—Å—å üíî',
                image='attachment://ship_img.png'
            ), file=file
        )

    @commands.slash_command(name='russian-roulette', description="–ò–≥—Ä–∞ –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É...)")
    async def fun_rr(self, inter, action: Literal['–í–æ–π—Ç–∏', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É']):
        if await self.bot.config.DB.russian_roulette.count_documents({"_id": inter.guild.id}) == 0:
            if action == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
                await self.bot.config.DB.russian_roulette.insert_one({"_id": inter.guild.id, "lobby": "rr", "step": [inter.author.id], "joined": [inter.author.id], "started_or_not": False, 'start_time': datetime.datetime.now().strftime("%H%M")})
                data = await self.bot.config.DB.russian_roulette.find_one({"_id": inter.guild.id})
                await inter.send("–õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ! –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç >=3 –∏–≥—Ä–æ–∫–æ–≤.")
                # if (int(msg.created_at.strftime('%H%M'))+5) - int(datetime.datetime.now().strftime('%H%M')) > data['start_time']:
            else:
                raise CustomError("–ù–µ—Ç –Ω–∞—á–∞—Ç–æ–π –∏–≥—Ä—ã!")

        else:
            if action == "–í–æ–π—Ç–∏":
                data = await self.bot.config.DB.russian_roulette.find_one({"_id": inter.guild.id})

                if data['started_or_not']:
                    raise CustomError("–°–µ–π—á–∞—Å —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!")
                else:
                    await self.bot.config.DB.russian_roulette.update_one({"_id": inter.guild.id}, {"$push": {"joined": inter.author.id}})
                    await inter.send("–Ø –ø–æ–¥–∫–ª—é—á–∏–ª–∞ –≤–∞—Å –∫ –∏–≥—Ä–µ.")
                    new_data = await self.bot.config.DB.russian_roulette.find_one({"_id": inter.guild.id})

                    if len(new_data['joined']) >= 2:
                        await self.bot.config.DB.russian_roulette.update_one({"_id": inter.guild.id}, {"$set": {"started_or_not": True}})
                        await inter.send(f"–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –•–æ–¥–∏—Ç–µ, {inter.guild.get_member(int(new_data['joined'][0])).mention}. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–í—ã—Å—Ç—Ä–µ–ª'")
            
            else:
                raise CustomError("–°–µ–π—á–∞—Å —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!")

    @commands.Cog.listener()
    async def on_message(self, message):
        if await self.bot.config.DB.russian_roulette.count_documents({"_id": message.guild.id}) != 0:
            data = await self.bot.config.DB.russian_roulette.find_one({"_id": message.guild.id})
            if message.author.id in data['joined']:
                if message.author.id == data['step'][0]:
                    if data['started_or_not']:
                        if message.content.lower() == "–≤—ã—Å—Ç—Ä–µ–ª":
                            rand = randint(1, 2)
                            for i in range(1, len(data['joined'])):
                                if len(data['joined']) > 1:
                                    await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$set": {"step": [data['joined'][i]]}})
                                    member = message.guild.get_member(int(data['joined'][i]))
                                else:
                                    await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$set": {"step": [data['joined'][0]]}})
                                    member = message.guild.get_member(int(data['joined'][0]))

                                if rand == 1:
                                    await message.channel.send(f'–¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ :). –°–ª–µ–¥—É—é—â–∏–π: {member.mention}')
                                else:
                                    await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$pull": {"joined": message.author.id, "step": message.author.id}})
                                    await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$set": {"step": [data['joined'][1 if len(data['joined']) > 1 else 0]]}})
                                    if len(data['joined']) == 1:
                                        await message.channel.send(f"–ê {member.mention} –≤–µ–∑—É–Ω—á–∏–∫.. –¢—ã –ø–æ–±–µ–¥–∏–ª(-–∞)!")
                                        await self.bot.config.DB.russian_roulette.delete_one({"_id": message.guild.id})
                                    else:
                                        await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$pull": {"joined": message.author.id, "step": message.author.id}})
                                        await self.bot.config.DB.russian_roulette.update_one({"_id": message.guild.id}, {"$set": {"step": [data['joined'][1 if len(data['joined']) > 1 else 0]]}})
                                        await message.channel.send(f'–¢–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –≤—ã–±—ã–≤–∞–µ—à—å. :(. –°–ª–µ–¥—É—é—â–∏–π: {member.mention}')

                        if int(data['start_time']) == int(datetime.datetime.now().strftime('%H%M'))+5:
                            await message.channel.send('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—Ä–µ–º—è –≤—ã–±—ã–ª–æ')
                            await self.bot.config.DB.russian_roulette.delete_one({"_id": message.guild.id})


def setup(bot):
    bot.add_cog(FunSlashCommands(bot))
